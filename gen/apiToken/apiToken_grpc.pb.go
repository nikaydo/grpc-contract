// proto/sso/sso.proto

// Версия ProtoBuf

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: apiToken.proto

package apiToken

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApiToken_ApiTokenCreate_FullMethodName = "/apiToken.apiToken/ApiTokenCreate"
	ApiToken_ApiTokenDelete_FullMethodName = "/apiToken.apiToken/ApiTokenDelete"
	ApiToken_ApiTokenGet_FullMethodName    = "/apiToken.apiToken/ApiTokenGet"
)

// ApiTokenClient is the client API for ApiToken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiTokenClient interface {
	ApiTokenCreate(ctx context.Context, in *ApiTokenCreateRequest, opts ...grpc.CallOption) (*ApiTokenCreateResponse, error)
	ApiTokenDelete(ctx context.Context, in *ApiTokenDeleteRequest, opts ...grpc.CallOption) (*ApiTokenDeleteResponse, error)
	ApiTokenGet(ctx context.Context, in *ApiTokenGetRequest, opts ...grpc.CallOption) (*ApiTokenGetResponse, error)
}

type apiTokenClient struct {
	cc grpc.ClientConnInterface
}

func NewApiTokenClient(cc grpc.ClientConnInterface) ApiTokenClient {
	return &apiTokenClient{cc}
}

func (c *apiTokenClient) ApiTokenCreate(ctx context.Context, in *ApiTokenCreateRequest, opts ...grpc.CallOption) (*ApiTokenCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiTokenCreateResponse)
	err := c.cc.Invoke(ctx, ApiToken_ApiTokenCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiTokenClient) ApiTokenDelete(ctx context.Context, in *ApiTokenDeleteRequest, opts ...grpc.CallOption) (*ApiTokenDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiTokenDeleteResponse)
	err := c.cc.Invoke(ctx, ApiToken_ApiTokenDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiTokenClient) ApiTokenGet(ctx context.Context, in *ApiTokenGetRequest, opts ...grpc.CallOption) (*ApiTokenGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiTokenGetResponse)
	err := c.cc.Invoke(ctx, ApiToken_ApiTokenGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiTokenServer is the server API for ApiToken service.
// All implementations must embed UnimplementedApiTokenServer
// for forward compatibility.
type ApiTokenServer interface {
	ApiTokenCreate(context.Context, *ApiTokenCreateRequest) (*ApiTokenCreateResponse, error)
	ApiTokenDelete(context.Context, *ApiTokenDeleteRequest) (*ApiTokenDeleteResponse, error)
	ApiTokenGet(context.Context, *ApiTokenGetRequest) (*ApiTokenGetResponse, error)
	mustEmbedUnimplementedApiTokenServer()
}

// UnimplementedApiTokenServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApiTokenServer struct{}

func (UnimplementedApiTokenServer) ApiTokenCreate(context.Context, *ApiTokenCreateRequest) (*ApiTokenCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiTokenCreate not implemented")
}
func (UnimplementedApiTokenServer) ApiTokenDelete(context.Context, *ApiTokenDeleteRequest) (*ApiTokenDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiTokenDelete not implemented")
}
func (UnimplementedApiTokenServer) ApiTokenGet(context.Context, *ApiTokenGetRequest) (*ApiTokenGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiTokenGet not implemented")
}
func (UnimplementedApiTokenServer) mustEmbedUnimplementedApiTokenServer() {}
func (UnimplementedApiTokenServer) testEmbeddedByValue()                  {}

// UnsafeApiTokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiTokenServer will
// result in compilation errors.
type UnsafeApiTokenServer interface {
	mustEmbedUnimplementedApiTokenServer()
}

func RegisterApiTokenServer(s grpc.ServiceRegistrar, srv ApiTokenServer) {
	// If the following call pancis, it indicates UnimplementedApiTokenServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApiToken_ServiceDesc, srv)
}

func _ApiToken_ApiTokenCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiTokenCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiTokenServer).ApiTokenCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiToken_ApiTokenCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiTokenServer).ApiTokenCreate(ctx, req.(*ApiTokenCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiToken_ApiTokenDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiTokenDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiTokenServer).ApiTokenDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiToken_ApiTokenDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiTokenServer).ApiTokenDelete(ctx, req.(*ApiTokenDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiToken_ApiTokenGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiTokenGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiTokenServer).ApiTokenGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiToken_ApiTokenGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiTokenServer).ApiTokenGet(ctx, req.(*ApiTokenGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiToken_ServiceDesc is the grpc.ServiceDesc for ApiToken service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiToken_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiToken.apiToken",
	HandlerType: (*ApiTokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApiTokenCreate",
			Handler:    _ApiToken_ApiTokenCreate_Handler,
		},
		{
			MethodName: "ApiTokenDelete",
			Handler:    _ApiToken_ApiTokenDelete_Handler,
		},
		{
			MethodName: "ApiTokenGet",
			Handler:    _ApiToken_ApiTokenGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apiToken.proto",
}
